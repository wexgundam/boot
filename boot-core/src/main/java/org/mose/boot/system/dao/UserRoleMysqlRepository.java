package org.mose.boot.system.dao;

import org.mose.boot.common.dao.stream.AbstractStreamRepository;
import org.mose.boot.system.modal.UserRole;
import org.mose.boot.util.code.ReturnCodeUtil;
import org.springframework.stereotype.Component;

import java.util.List;

/**
 * Description:
 *
 * @Author: 靳磊
 * @Date: 2017/8/14:22
 */
@Component
public class UserRoleMysqlRepository extends AbstractStreamRepository<Integer, UserRole> implements IUserRoleRepository {
    @Override
    public UserRole queryOne(int id) {
        String sql = "select id, name, description, parent_id, url, url_target, icon, display_order, (select name from t_userRole where id=t.parent_id) parent_name from T_UserRole t where id=?";
        return query().sql(sql).parameters(id).queryOne();
    }

    @Override
    public List<UserRole> queryAll() {
        String sql = "select id, name ,description, parent_id, url, url_target, icon, display_order from T_UserRole";
        return query().sql(sql).queryMany();
    }

    @Override
    public int insertOne(UserRole userRole) {
        StringBuffer sql = new StringBuffer();
        sql.append("insert into T_UserRole(name, description, parent_id, url, url_target, icon, display_order)");
        sql.append(" values(:name, :description, :parentId, :url, :urlTarget, :icon, :displayOrder)");
        Number id = insert().sql(sql.substring(0)).entity(userRole).idColumnName(
                "id").insertOneForAutoGeneratedId();
        if (id == null) {
            return ReturnCodeUtil.FAIL__SAVE;
        } else {
            userRole.setId(id.intValue());
            return ReturnCodeUtil.SUCCESS__SAVE;
        }
    }

    @Override
    public int updateOne(UserRole userRole) {
        StringBuffer sql = new StringBuffer();
        sql.append("update T_UserRole set name=:name, description=:description, parent_id=:parentId, url=:url, url_target=:urlTarget, icon=:icon, display_order=:displayOrder");
        sql.append(" where id=:id");
        int rowCount = update().sql(sql.substring(0)).parameterBean(userRole).updateAny();
        if (rowCount > 0) {
            return ReturnCodeUtil.SUCCESS__UPDATE;
        } else {
            return ReturnCodeUtil.FAIL__UPDATE_NULL;
        }
    }

    @Override
    public int deleteOne(UserRole userRole) {
        return deleteOne(userRole.getId());
    }

    @Override
    public int deleteOne(int id) {
        String sql = "delete from T_UserRole where id=?";
        return delete().sql(sql).parameters(id).deleteAny();
    }
}
