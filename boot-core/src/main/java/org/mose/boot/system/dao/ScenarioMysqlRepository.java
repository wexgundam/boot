package org.mose.boot.system.dao;

import org.mose.boot.common.dao.stream.AbstractStreamRepository;
import org.mose.boot.system.modal.Scenario;
import org.mose.boot.util.code.ReturnCodeUtil;
import org.springframework.stereotype.Component;

import java.util.List;

/**
 * Description:
 *
 * @Author: 靳磊
 * @Date: 2017/8/14:22
 */
@Component
public class ScenarioMysqlRepository extends AbstractStreamRepository<Integer, Scenario> implements IScenarioRepository {
    @Override
    public Scenario queryOne(int id) {
        String sql = "select id, name, description, parent_id, url, url_target, icon, display_order, (select name from t_scenario where id=t.parent_id) parent_name from t_scenario t where id=?";
        return query().sql(sql).parameters(id).queryOne();
    }

    @Override
    public List<Scenario> queryAll() {
        String sql = "select id, name ,description, parent_id, url, url_target, icon, display_order from t_scenario";
        return query().sql(sql).queryMany();
    }

    @Override
    public int insertOne(Scenario scenario) {
        StringBuffer sql = new StringBuffer();
        sql.append("insert into t_scenario(name, description, parent_id, url, url_target, icon, display_order)");
        sql.append(" values(:name, :description, :parentid, :url, :urltarget, :icon, :displayorder)");
        Number id = insert().sql(sql.substring(0)).entity(scenario).idColumnName(
                "id").insertOneForAutoGeneratedId();
        if (id == null) {
            return ReturnCodeUtil.FAIL__SAVE;
        } else {
            scenario.setId(id.intValue());
            return ReturnCodeUtil.SUCCESS__SAVE;
        }
    }

    @Override
    public int updateOne(Scenario scenario) {
        StringBuffer sql = new StringBuffer();
        sql.append("update t_scenario set name=:name, description=:description, parent_id=:parentid, url=:url, url_target=:urltarget, icon=:icon, display_order=:displayorder");
        sql.append(" where id=:id");
        int rowCount = update().sql(sql.substring(0)).parameterBean(scenario).updateAny();
        if (rowCount > 0) {
            return ReturnCodeUtil.SUCCESS__UPDATE;
        } else {
            return ReturnCodeUtil.FAIL__UPDATE_NULL;
        }
    }

    @Override
    public int deleteOne(Scenario scenario) {
        return deleteOne(scenario.getId());
    }

    @Override
    public int deleteOne(int id) {
        int childrenCount = queryChildrenCount(id);
        if (childrenCount > 0) {
            return ReturnCodeUtil.FAIL__DELETE_HAVE_CHILDREN;
        } else {
            String sql = "delete from t_scenario where id=?";
            return delete().sql(sql).parameters(id).deleteAny();
        }
    }


    @Override
    public int queryChildrenCount(int id) {
        String sql = "select count(id) from t_scenario where parent_id=?";
        return query().sql(sql).parameters(id).queryCount();
    }
}
